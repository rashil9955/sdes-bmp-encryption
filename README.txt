# S‑DES on BMP in ECB/CBC/CTR (C)

This project encrypts/decrypts uncompressed **.bmp** images using the **Simplified DES (S‑DES)** toy cipher over 8‑bit blocks and demonstrates the visual difference between **ECB**, **CBC**, and **CTR** modes on image data.

> **TL;DR:** ECB leaks image structure (patterns stay visible), while CBC/CTR hide it and look like noise.

## Build
```bash
gcc bmper.c sdes.c -o bmper
```

## Run
Interactive prompts:
```
=== S-DES BMP encrypt/decrypt (ECB/CBC/CTR) ===
Encrypt? (No means Decrypt) [y/n]: y
Enter 10-bit key as bits (e.g., 1010000010): 1010000010
Mode (ECB/CBC/CTR): ECB
Input .bmp path: test.bmp
Output .bmp path: ecb_enc.bmp
```
For CBC and CTR you’ll be asked for an **8‑bit IV/nonce** (e.g., `0xA3`).  
**Decrypt** by answering `n` to the first prompt and reusing the same key + IV/nonce (for CBC/CTR).

## How it works 
- Only the **pixel data** is transformed; the **BMP header** (up to `bfOffBits`) is copied unchanged so image viewers can still open the file.
- S‑DES uses a **10‑bit key**, **8‑bit block** with IP/P10/P8/P4/EP permutations and S‑boxes (Stallings). We implement the standard **Feistel** structure with two rounds and subkeys `K1` and `K2` from the key schedule.
- Modes:
  - **ECB:** encrypt each byte independently → leaks structure.
  - **CBC:** XOR with previous ciphertext (starts with IV) before encryption → hides structure; needs IV for decryption.
  - **CTR:** XOR with a keystream generated by encrypting a counter/nonce → hides structure; same code for enc/dec; **never reuse (key, nonce)**.

## File list
- `sdes.h` / `sdes.c`: S‑DES key schedule and 8‑bit block encrypt/decrypt.
- `bmper.c`: BMP reader/writer that preserves header and applies ECB/CBC/CTR to the pixel stream.
- `README.md` (this file).

## Notes & assumptions
- Works best with **24‑bit** uncompressed BMPs. If you use palettized (≤8‑bit) BMPs, their **palette** may live between the 54‑byte DIB header and `bfOffBits`—this program copies **exactly `bfOffBits` bytes** before transforming pixel data, so palettes remain intact.
- **Padding:** not needed because we operate on 8‑bit blocks (bytes).
- This is a teaching demo; **S‑DES is not secure**.

## References 
Stallings, W. Simplified DES (S-DES). Appendix G, Cryptography and Network Security resources.
https://mercury.webster.edu/aleshunas/COSC%205130/G-SDES.pdf

Li, T. (Teaching handout). Simplified DES Algorithm (S-DES).
https://terenceli.github.io/assets/file/mimaxue/SDES.pdf

Rohini College of Engineering & Technology (Lecture notes). Simplified DES – Cryptography.
https://www.rcet.org.in/uploads/academics/regulation2021/rohini_18834126149.pdf

National Institute of Standards and Technology (NIST). Recommendation for Block Cipher Modes of Operation (ECB, CBC, CFB, OFB, CTR).
NIST Special Publication 800-38A.
https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-38a.pdf

Wikipedia contributors. BMP file format. Wikipedia.
https://en.wikipedia.org/wiki/BMP_file_format

DigicamSoft. BMP File Format Summary.
https://www.digicamsoft.com/bmp/bmp.html

## Academic integrity
- Implementation authored from the above **public references only**; no code copied from current or former CSc 487/587 students.
- Please include your own **screenshots** (ECB vs CBC vs CTR) when you submit.